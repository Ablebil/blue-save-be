generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid()) @db.Uuid
  email               String         @unique @db.VarChar(320)
  password            String?        @db.VarChar(255)
  name                String         @db.VarChar(50)
  googleId            String?        @unique @db.VarChar(255)
  otp                 String?        @db.Char(6)
  otpExpiresAt        DateTime?
  role                Role           @default(USER)
  verified            Boolean        @default(false)
  resetToken          String?        @db.VarChar(255)
  resetTokenExpiresAt DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  refreshTokens       RefreshToken[]
  reports             Report[]
  donations           Donation[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @db.VarChar(255)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String       @id @default(uuid()) @db.Uuid
  title       String       @db.VarChar(255)
  street      String       @db.VarChar(255)
  province    String       @db.VarChar(255)
  country     String       @db.VarChar(255)
  description String       @db.Text
  media       String       @db.VarChar(255)
  status      ReportStatus @default(WAITING)
  userId      String       @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Donation {
  id        String   @id @default(cuid())
  orderId   String   @db.VarChar(255)
  amount    Decimal  @db.Decimal(10, 2)
  phone     String   @db.VarChar(25)
  userId    String   @db.Uuid
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum ReportStatus {
  WAITING
  VERIFIED
  INVALID
  RESOLVED
}
